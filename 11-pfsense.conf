filter {
  #
  # Do initial parsing of PFSense logs
  #
  if "PFSense" in [tags] {
    grok {
      match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]
    }
    mutate {
      gsub => ["datetime","  "," "]
    }
    date {
      match => [ "datetime", "MMM dd HH:mm:ss" ]
    }
    mutate {
      replace => [ "message", "%{msg}" ]
    }
    mutate {
      remove_field => [ "msg", "datetime" ]
    }

    #
    # Parse dhcpd messages - taken from http://everythingshouldbevirtual.com/pfsense-snort-logstash
    # To do:  Make these into patterns and add to pfsense-patterns file
    #
    if [prog] =~ /^dhcpd$/ {
      mutate {
      add_tag => [ "dhcpd" ]
      }
      if [message] =~ /^DHCPACK|^DHCPREQUEST|^DHCPOFFER/ {
        grok {
          match => [ "message", "(?<action>.*) (on|for|to) (?<src_ip>[0-2]?[0-9]?[0-9]\.[0-2]?[0-9]?[0-9]\.[0-2]?[0-9]?[0-9]\.[0-2]?[0-9]?[0-9]) .*(?<mac_address>[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]).* via (?<iface>.*)" ]
        }
      }
      if [message] =~ /^DHCPDISCOVER/ {
        grok {
          match => [ "message", "(?<action>.*) from (?<mac_address>[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]).* via (?<iface>.*)" ]
        }
      }
      if [message] =~ /^DHCPINFORM/ {
        grok {
          match => [ "message", "(?<action>.*) from (?<src_ip>.*).* via (?<iface>.*)" ]
        }
      }
    }
 
    #
    # Parse ntpd log messages - Do nothing except add tag.
    # To Do: Add specific parsing options for varous types of events.
    #
    if [prog] =~ /^ntpd/ {
      mutate {
        add_tag => [ "ntpd" ]
      }
    }

    #
    # Parse any web portal messages
    #
    if [prog] =~ /^php-fpm/ {
      mutate {
        add_tag => [ "web_portal" ]
      }
      grok {
        patterns_dir => ["/etc/logstash/conf.d/patterns"]
        match => [ "message", "%{PFSENSE_APP} %{PFSENSE_APP_DATA}","message", "%{PFSENSE_APP} %{PFSENSE_APP_DATA}" ]
      }
      mutate {
        lowercase => [ 'pfsense_ACTION' ]
      }
    }

    #
    # Parse dpinger messages
    #
    if [prog] =~ /^dpinger/ {
      mutate {
        add_tag => [ "dpinger" ]
      }
    }

    #
    # Parse Suricata Messages
    #
    if [prog] =~ /^suricata/ {
      mutate {
        add_tag => [ "SuricataIDPS" ] 
      } 
    }
    
    #
    # Parse Barnyard2 Messages
    #
    if [prog] =~ /^barnyard2/ {
      mutate {
        add_tag => [ "barnyard2" ] 
      } 
    }

    #
    # Parse OpenVPN Messages
    #
    if [prog] =~ /^openvpn/ {
      mutate {
        add_tag => [ "openvpn" ] 
      } 
    }
   
    #
    #
    # 
    if [message] =~ /^\{/ { 
      mutate { 
        gsub => [ "message", "[\u0000]", "\\\"}}" ] 
        add_tag => [ "MiscEvent" ]
      }
      json { 
        source => "message" 
      }
    } 
    #
    # Parse firewall messages
    #
    if [prog] =~ /^filterlog$/ {  
      mutate {
        remove_field => [ "msg", "datetime" ]      
      }
      grok {
        add_tag => [ "firewall" ]
        patterns_dir => ["/etc/logstash/conf.d/patterns"]
        match => [ "message", "%{PFSENSE_LOG_ENTRY}","message", "%{PFSENSE_LOG_ENTRY}" ]
      }
      mutate {
        lowercase => [ 'proto' ]
      }
      if "_grokparsefailure" not in [tags] {
        geoip {
          add_tag => [ "GeoIP" ]
          source => "src_ip"
        }
      }
      # 
      # Try to resolve the src_ip and dest_ip
      # Use the Google DNS Servers
      dns {
#        nameserver => "192.168.1.250"
        nameserver => "8.8.8.8"
        nameserver => "2001:4860:4860:8888"
        reverse => [ "src_ip", "src_ip_fqdn" ]
        action => "append"
      }
    } 
  }
}

