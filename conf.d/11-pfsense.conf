filter {
  #
  # Do initial parsing of PFSense logs
  #
  if "PFSense" in [tags] {
    grok {
      match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]
    }
    mutate {
      gsub => ["datetime","  "," "]
    }
    date {
      match => [ "datetime", "MMM dd HH:mm:ss" ]
    }
    mutate {
      replace => [ "message", "%{msg}" ]
    }
    mutate {
      remove_field => [ "msg", "datetime" ]
    }

    #
    # Parse dhcpd messages 
    #
    if [prog] =~ /^dhcpd$/ {
      mutate {
        add_tag => [ "dhcpd" ]
      }
      grok { 
        patterns_dir => ["/etc/logstash/conf.d/patterns"]
        match => [ "message", "%{DHCPD}" ] 
      }
    }
 
    #
    # Parse ntpd log messages - Do nothing except add tag.
    # To Do: Add specific parsing options for varous types of events.
    #
    if [prog] =~ /^ntpd/ {
      mutate {
        add_tag => [ "ntpd" ]
      }
    }

    #
    # Parse php messages.  For now do nothing but add a tag.
    #
    if [prog] =~ /php/ {
      mutate {
        add_tag => [ "php" ]
      }
    }

    #
    # Parse any web portal messages
    #
    if [prog] =~ /^php-fpm/ {
      mutate {
        add_tag => [ "web_portal" ]
      }
      grok {
        patterns_dir => ["/etc/logstash/conf.d/patterns"]
        match => [ "message", "%{PFSENSE_APP} %{PFSENSE_APP_DATA}","message", "%{PFSENSE_APP} %{PFSENSE_APP_DATA}" ]
      }
      mutate {
        lowercase => [ 'pfsense_ACTION' ]
      }
    }

    #
    # Parse dpinger messages
    #
    if [prog] =~ /^dpinger/ {
      mutate {
        add_tag => [ "dpinger" ]
      }
    }

    #
    # Parse Suricata Messages
    # ToDo:  Add specific lookups similiar to https://rareintel.com/category/pfsense/
    if [prog] =~ /^suricata/ {
      mutate {
        add_tag => [ "SuricataIDPS" ] 
      } 
      grok {
        match => [ "message", "\[%{NUMBER:IDS_GENID}:%{NUMBER:IDS_SIGID}:%{NUMBER:IDS_SIGREV}\]%{SPACE}%{GREEDYDATA:IDS_DESCRIPTION}%{SPACE}\[Classification:%{SPACE}%{GREEDYDATA:IDS_CLASSIFICATION}\]%{SPACE}\[Priority:%{SPACE}%{NUMBER:IDS_PRIORITY}\]%{SPACE}{%{WORD:IDS_PROTOCOL}}%{SPACE}%{IP:IDS_SRC_IP}:%{NUMBER:IDS_SRC_PORT}%{SPACE}->%{SPACE}%{IP:IDS_DST_IP}:%{NUMBER:IDS_DST_PORT}" ]
        tag_on_failure => ["_grokfailids"]
      }
      geoip {
        add_tag => [ "GeoIP" ]
        source => "IDS_SRC_IP"
      }
      dns {
        nameserver => "192.168.1.250"
        nameserver => "8.8.8.8"
        nameserver => "2001:4860:4860:8888"
        reverse => [ "IDS_SRC_IP", "IDS_DST_IP" ]
        action => "append"
      }


    }
    
    #
    # Parse Barnyard2 Messages
    #
    if [prog] =~ /^barnyard2/ {
      mutate {
        add_tag => [ "barnyard2" ] 
      } 
    }

    #
    # Parse OpenVPN Messages
    #
    if [prog] =~ /^openvpn/ {
      mutate {
        add_tag => [ "openvpn" ] 
      } 
      grok {
         match => [ "message", "user \'%{WORD:openvpn_user}\'" ]
         match => [ "message", "%{WORD:openvpn_user}/%{IP:openvpn_scr_ip}:%{INT:openvpn_scr_port} MULTI_sva: pool returned IPv4=%{IP:openvpn_ip}" ]
      }
      #GEO DATA
      geoip {
        source => "openvpn_scr_ip"
      }
      if "_grokparsefailure" not in [tags] {
        geoip {
          add_tag => [ "GeoIP" ]
          source => "openvpn_src_ip"
        }
      }
      # 
      # Try to resolve the src_ip and dest_ip
      # Use the Google DNS Servers
      dns {
        nameserver => "192.168.1.250"
        nameserver => "8.8.8.8"
        nameserver => "2001:4860:4860:8888"
        reverse => [ "openvpn_src_ip" ]
        action => "append"
      }
    }
   
    #
    #
    # 
    if [message] =~ /^\{/ { 
      mutate { 
        gsub => [ "message", "[\u0000]", "\\\"}}" ] 
        add_tag => [ "MiscEvent" ]
      }
      json { 
        source => "message" 
      }
    } 
    #
    # Parse firewall messages
    #
    if [prog] =~ /^filterlog$/ {  
      mutate {
        remove_field => [ "msg", "datetime" ]      
      }
      grok {
        add_tag => [ "firewall" ]
        patterns_dir => ["/etc/logstash/conf.d/patterns"]
        match => [ "message", "%{PFSENSE_LOG_ENTRY}","message", "%{PFSENSE_LOG_ENTRY}" ]
      }
      mutate {
        lowercase => [ 'proto' ]
      }
      if "_grokparsefailure" not in [tags] {
        geoip {
          add_tag => [ "GeoIP" ]
          source => "src_ip"
        }
      }
      # 
      # Try to resolve the src_ip and dest_ip
      # Use the Google DNS Servers
      dns {
        nameserver => "192.168.1.250"
        nameserver => "8.8.8.8"
        nameserver => "2001:4860:4860:8888"
        reverse => [ "src_ip", "dest_ip" ]
        action => "append"
      }
    } 
  }
}

