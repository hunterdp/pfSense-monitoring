#  The following describes how to install ELK stack on Ubuntu 16.04 LTS that is
#  frontended by NGINX proxy server.  This was derived from multiple sources and 
#  customized to work in my environment.  It should be generic enough to work 
#  in most Ubuntu environments but no promises.
#  NB: I should move this to a puppet script

#  Install OpenJDK version 8
sudo add-apt-repository ppa:webupd8team/java
sudo apt update
sudo apt install oracle-java8-installer
#
#  Check to make sure it installed correctly
#
java -version

#  should yield: (don't worry about the exact versions)
#     java version "1.8.0_xxx"
#     Java(TM) SE Runtime Environment (build 1.8.0_131-bxx)
#     Java HotSpot(TM) 64-Bit Server VM (build 25.131-bxx, mixed mode)

#
#  Install elasticsearch
#
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
echo "deb https://artifacts.elastic.co/packages/5.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-5.x.list
sudo apt update
sudo apt install elasticsearch

#  The elasticsearch configuration file needs to be modified as follows
sudo nano /etc/elasticsearch/elasticsearch.yml

#  change the following at a minimium (example names added)
#    cluster.name: (required)
#    node.name: (optional)
#    node.attr.rack: (optional)
#    network.host: localhost

#  Before starting Elasticsearch (sudo service elasticsearch start), 
#  you’ll need to decide how much memory you’re willing to give it. 
#  This is specified by changing -Xms and -Xmx in 
#  /etc/elasticsearch/jvm.options.   The rule of thumb is to 
#  start with half of the total available memory of the server 
#  as the value for both options; this will leave the other 
#  half available to the operating system for caching.

#  start elastic search & check and it is running
sudo systemctl restart elasticsearch
sudo systemctl enable elasticsearch
sudo systemctl status elasticsearch | grep Active:
curl -X GET http://localhost:9200 -s | grep cluster_name

#
#  Install Kibana
#
sudo apt install kibana

#  Modify the kibana configuration to only restrict remote access.
sudo nano /etc/kibana/kibana.yml
#  change the following:
#    server.host: "localhost"

#  Start Kibana, set it to automatically start at reboot & make sure it is running
sudo systemctl restart kibana
sudo systemctl enable kibana
sudo systemctl status kibana |grep Active:

#  
#  Setup NGINX as a reverse proxy and protect it with a password
#
sudo apt update
sudo apt install nginx
sudo apt install apache2-utils
echo "admin:$(openssl passwd -apr1 YourStrongPassword)" | sudo tee -a /etc/nginx/htpasswd.kibana

#  
#  Delete the default virtual host and add one for kibana
#  
sudo rm /etc/nginx/sites-enabled/default
sudo nano /etc/nginx/sites-available/kibana

##############################################################
----- kibana -----
server {
    listen 80;
    server_name elk2.312woodland.ddns.net;

    auth_basic "Restricted Access";
    auth_basic_user_file /etc/nginx/htpasswd.kibana;

    location / {
        proxy_pass http://localhost:5601;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

}

server {
    listen 8080;
    server_name elk2.312woodland.ddns.net;

    auth_basic "Restricted Access";
    auth_basic_user_file /etc/nginx/htpasswd.kibana;

    location / {
        proxy_pass http://localhost:9200;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}

server {
    listen 81;
    server_name "";

    auth_basic "Restricted Access";
    auth_basic_user_file /etc/nginx/htpasswd.kibana;

    location / {
        proxy_pass http://localhost:5601;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
server {
    listen 8081;
    server_name "";

    auth_basic "Restricted Access";
    auth_basic_user_file /etc/nginx/htpasswd.kibana;

    location / {
        proxy_pass http://localhost:9200;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}

----- end kibana -----
###################################################################

# 
#  Activate the virtual server by creating a symbolic link to it &
#  test that it all works.
#  
sudo ln -s /etc/nginx/sites-available/kibana /etc/nginx/sites-enabled/kibana
sudo nginx -t
sudo systemctl restart nginx
sudo systemctl status nginx | grep Active:


#  Now install and Filebeat
sudo apt install filebeat
sudo systemctl restart filebeat

#  Install Logstash
sudo apt install logstash

#  Create a logstash.conf file 
sudo nano /etc/logstash/conf.d/logstash.conf

#  Now you need to modify the filebeats configuration file to
#  output logstash.  Comment out elasticsearch section and use the
#  logstash section
sudo nano /etc/filebeat/filebeat.yml

#  Stop the filebeat service
sudo service filebeat stop

#  Remove the registry file from before
sudo rm /var/lib/filebeat/registry

#  Delete any existing data in Elasticsearch
curl -XDELETE localhost:9200/filebeat*

#  Start Logstash and Filebeat and chck status
sudo service logstash start; sudo service filebeat start
sudo service logstash status
sudo service filebeat status


#
# Customize Elasticsearch configuration file
#
sudo nano /etc/elasticsearch/elasticsearch.yml

# Modify the following options (optional)
# cluster-name:  
# node.name: 
# node.attr.rack: 

# restart elasticsearch service
sudo service elasticsearch restart

#
# Add the logstash conf files
#  - Note that the files are concatenated together in lexical order.
#  - Model is xx-inputs.conf  --> defines the input channels for receiving information
#             xx-xxxxxx.conf  --> defines the filtering options for that log format
#             xx-outputs.conf --> defines the output options.
# current ones are:
# 01-inputs.conf (ports 5000 -> syslog and pfsense defined)
# 10-syslog.conf (syslog filtering)
# 10-syslog-esxi.conf (esxi filtering, not VirtualCenter)
# 11-pfsense.conf (pfsense firewall events filtering)
# 30-outputs.conf (pipe it all to elasticsearch)


